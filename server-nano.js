const express = require('express');
const cors = require('cors');
const multer = require('multer');
const Replicate = require('replicate');
const fetch = require('node-fetch'); // v2

const app = express();
app.use(cors());

// Multer v2 ‚Äî —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç–∏
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 25 * 1024 * 1024 } // 25MB/—Ñ–∞–π–ª
});

// Replicate client (—Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });
if (!process.env.REPLICATE_API_TOKEN) {
  console.warn('‚ö†Ô∏è  REPLICATE_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: export REPLICATE_API_TOKEN="..."');
}

// –•–µ–ª–ø–µ—Ä: Buffer -> data:URL
function bufferToDataUrl(buffer, mime = 'image/png') {
  return `data:${mime};base64,${buffer.toString('base64')}`;
}


// –°—Ç–∏–ª–∏ ‚Üí –ø—Ä–æ–º–ø—Ç—ã
const STYLE_PROMPTS = {
  pencil:           'pencil sketch style, clean lines, realistic shading, subtle paper texture',
  watercolor:       'watercolor painting style, soft edges, gentle wash, paper texture, natural gradients',
  oil:              'oil painting style, rich brush strokes, impasto, realistic lighting, detailed texture',
  colored_pencils:  'colored pencil drawing style, vivid colors, visible pencil strokes, paper grain',
  markers:          'alcohol markers illustration style, bold outlines, flat fills, cel shading, comic look',
  photo_real:       'photo-realistic enhancement, crisp details, natural tones, high dynamic range'
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ nano-banana
async function normalizeOutputs(output) {
  const urls = [];
  const pushUrl = (u) => { if (u && typeof u === 'string') urls.push(u); };
  try { if (output && typeof output.url === 'function') urls.push(output.url()); } catch {}
  if (typeof output === 'string') urls.push(output);
  if (Array.isArray(output)) output.forEach(pushUrl);
  return urls;
}

// –°–∫–∞—á–∏–≤–∞–µ–º URL -> dataURL
async function urlToDataUrl(u) {
  const r = await fetch(u);
  const buf = await r.buffer();
  return 'data:image/png;base64,' + buf.toString('base64');
}

app.post('/api/transform', upload.array('photos'), async (req, res) => {
  try {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –ø–æ–ª–µ–π
    const body = req.body || {};
    const style = body.style || 'photo_real';
    const userPrompt = (body.prompt || '').trim();
    const prompt = userPrompt || (STYLE_PROMPTS[style] || STYLE_PROMPTS.photo_real);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ error: '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ (–æ–∂–∏–¥–∞–ª–∏—Å—å –ø–æ–ª–µ "photos" –≤ multipart/form-data)' });
    }

    // –ì–æ—Ç–æ–≤–∏–º –≤—Ö–æ–¥—ã –¥–ª—è –º–æ–¥–µ–ª–∏ (data:URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
    const image_input = req.files.map(f => bufferToDataUrl(f.buffer, f.mimetype || 'image/png'));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (!process.env.REPLICATE_API_TOKEN) {
      return res.status(500).json({ error: 'REPLICATE_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }

    // –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ Replicate (google/nano-banana)
    const output = await replicate.run("google/nano-banana", {
      input: { prompt, image_input }
    });

    const urls = await normalizeOutputs(output);
    if (!urls.length) {
      return res.status(502).json({ error: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏' });
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–¥–∞—ë–º —Ñ—Ä–æ–Ω—Ç—É –∫–∞–∫ dataURL
    const images = [];
    for (let i = 0; i < urls.length; i++) {
      try {
        const dataUrl = await urlToDataUrl(urls[i]);
        images.push({
          filename: (req.files?.[i]?.originalname || `image-${i + 1}`) + '.png',
          dataUrl
        });
      } catch (e) {
        console.error('fetch image error:', e);
      }
    }

    if (!images.length) {
      return res.status(502).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏' });
    }

    return res.json({ images });
  } catch (err) {
    console.error('transform error:', err);
    return res.status(500).json({ error: err.message || String(err) });
  }
});


    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
    const image_input = [];
    for (const f of (req.files || [])) {
      const dataUrl = 'data:' + (f.mimetype || 'image/png') + ';base64,' + f.buffer.toString('base64');
      image_input.push(dataUrl);
    }
    if (!image_input.length) return res.status(400).json({ error: '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ (–æ–∂–∏–¥–∞–ª–∏—Å—å "photos")' });

    // –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
    const output = await replicate.run("google/nano-banana", {
      input: { prompt, image_input }
    });

    const urls = await normalizeOutputs(output);
    if (!urls.length) return res.status(500).json({ error: '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏' });

    const images = [];
    for (let i = 0; i < urls.length; i++) {
      images.push({
        filename: (req.files?.[i]?.originalname || `image-${i+1}`) + '.png',
        dataUrl: await urlToDataUrl(urls[i])
      });
    }

    res.json({ images });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message || String(err) });
  }
});

// –ü–æ—Ä—Ç 3001, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å server.js
const PORT = process.env.PORT || 3001;
app.listen(PORT, '0.0.0.0', () => console.log('üçå nano-banana server on http://localhost:' + PORT));
